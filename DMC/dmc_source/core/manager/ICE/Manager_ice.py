# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.9
#
# <auto-generated>
#
# Generated from file `Manager.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module ManagerRef
_M_ManagerRef = Ice.openModule('ManagerRef')
__name__ = 'ManagerRef'

if 'notFoundRef' not in _M_ManagerRef.__dict__:
    _M_ManagerRef.notFoundRef = Ice.createTempClass()
    class notFoundRef(Ice.UserException):
        def __init__(self, reason="Reference not found"):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::ManagerRef::notFoundRef'

    _M_ManagerRef._t_notFoundRef = IcePy.defineException('::ManagerRef::notFoundRef', notFoundRef, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    notFoundRef._ice_type = _M_ManagerRef._t_notFoundRef

    _M_ManagerRef.notFoundRef = notFoundRef
    del notFoundRef

if 'notFoundClass' not in _M_ManagerRef.__dict__:
    _M_ManagerRef.notFoundClass = Ice.createTempClass()
    class notFoundClass(Ice.UserException):
        def __init__(self, reason="Class not found"):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::ManagerRef::notFoundClass'

    _M_ManagerRef._t_notFoundClass = IcePy.defineException('::ManagerRef::notFoundClass', notFoundClass, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    notFoundClass._ice_type = _M_ManagerRef._t_notFoundClass

    _M_ManagerRef.notFoundClass = notFoundClass
    del notFoundClass

_M_ManagerRef._t_Manager = IcePy.defineValue('::ManagerRef::Manager', Ice.Value, -1, (), False, True, None, ())

if 'ManagerPrx' not in _M_ManagerRef.__dict__:
    _M_ManagerRef.ManagerPrx = Ice.createTempClass()
    class ManagerPrx(Ice.ObjectPrx):

        def addRef(self, name, origin, clsname, descriptionpath, protected, context=None):
            return _M_ManagerRef.Manager._op_addRef.invoke(self, ((name, origin, clsname, descriptionpath, protected), context))

        def addRefAsync(self, name, origin, clsname, descriptionpath, protected, context=None):
            return _M_ManagerRef.Manager._op_addRef.invokeAsync(self, ((name, origin, clsname, descriptionpath, protected), context))

        def begin_addRef(self, name, origin, clsname, descriptionpath, protected, _response=None, _ex=None, _sent=None, context=None):
            return _M_ManagerRef.Manager._op_addRef.begin(self, ((name, origin, clsname, descriptionpath, protected), _response, _ex, _sent, context))

        def end_addRef(self, _r):
            return _M_ManagerRef.Manager._op_addRef.end(self, _r)

        def findRefByName(self, name, context=None):
            return _M_ManagerRef.Manager._op_findRefByName.invoke(self, ((name, ), context))

        def findRefByNameAsync(self, name, context=None):
            return _M_ManagerRef.Manager._op_findRefByName.invokeAsync(self, ((name, ), context))

        def begin_findRefByName(self, name, _response=None, _ex=None, _sent=None, context=None):
            return _M_ManagerRef.Manager._op_findRefByName.begin(self, ((name, ), _response, _ex, _sent, context))

        def end_findRefByName(self, _r):
            return _M_ManagerRef.Manager._op_findRefByName.end(self, _r)

        def findRefsDefs(self, name, context=None):
            return _M_ManagerRef.Manager._op_findRefsDefs.invoke(self, ((name, ), context))

        def findRefsDefsAsync(self, name, context=None):
            return _M_ManagerRef.Manager._op_findRefsDefs.invokeAsync(self, ((name, ), context))

        def begin_findRefsDefs(self, name, _response=None, _ex=None, _sent=None, context=None):
            return _M_ManagerRef.Manager._op_findRefsDefs.begin(self, ((name, ), _response, _ex, _sent, context))

        def end_findRefsDefs(self, _r):
            return _M_ManagerRef.Manager._op_findRefsDefs.end(self, _r)

        def addObjToServer(self, compName, clsName, context=None):
            return _M_ManagerRef.Manager._op_addObjToServer.invoke(self, ((compName, clsName), context))

        def addObjToServerAsync(self, compName, clsName, context=None):
            return _M_ManagerRef.Manager._op_addObjToServer.invokeAsync(self, ((compName, clsName), context))

        def begin_addObjToServer(self, compName, clsName, _response=None, _ex=None, _sent=None, context=None):
            return _M_ManagerRef.Manager._op_addObjToServer.begin(self, ((compName, clsName), _response, _ex, _sent, context))

        def end_addObjToServer(self, _r):
            return _M_ManagerRef.Manager._op_addObjToServer.end(self, _r)

        def shutdown(self, context=None):
            return _M_ManagerRef.Manager._op_shutdown.invoke(self, ((), context))

        def shutdownAsync(self, context=None):
            return _M_ManagerRef.Manager._op_shutdown.invokeAsync(self, ((), context))

        def begin_shutdown(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_ManagerRef.Manager._op_shutdown.begin(self, ((), _response, _ex, _sent, context))

        def end_shutdown(self, _r):
            return _M_ManagerRef.Manager._op_shutdown.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_ManagerRef.ManagerPrx.ice_checkedCast(proxy, '::ManagerRef::Manager', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_ManagerRef.ManagerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::ManagerRef::Manager'
    _M_ManagerRef._t_ManagerPrx = IcePy.defineProxy('::ManagerRef::Manager', ManagerPrx)

    _M_ManagerRef.ManagerPrx = ManagerPrx
    del ManagerPrx

    _M_ManagerRef.Manager = Ice.createTempClass()
    class Manager(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::ManagerRef::Manager')

        def ice_id(self, current=None):
            return '::ManagerRef::Manager'

        @staticmethod
        def ice_staticId():
            return '::ManagerRef::Manager'

        def addRef(self, name, origin, clsname, descriptionpath, protected, current=None):
            raise NotImplementedError("servant method 'addRef' not implemented")

        def findRefByName(self, name, current=None):
            raise NotImplementedError("servant method 'findRefByName' not implemented")

        def findRefsDefs(self, name, current=None):
            raise NotImplementedError("servant method 'findRefsDefs' not implemented")

        def addObjToServer(self, compName, clsName, current=None):
            raise NotImplementedError("servant method 'addObjToServer' not implemented")

        def shutdown(self, current=None):
            raise NotImplementedError("servant method 'shutdown' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_ManagerRef._t_ManagerDisp)

        __repr__ = __str__

    _M_ManagerRef._t_ManagerDisp = IcePy.defineClass('::ManagerRef::Manager', Manager, (), None, ())
    Manager._ice_type = _M_ManagerRef._t_ManagerDisp

    Manager._op_addRef = IcePy.Operation('addRef', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    Manager._op_findRefByName = IcePy.Operation('findRefByName', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_ManagerRef._t_notFoundRef,))
    Manager._op_findRefsDefs = IcePy.Operation('findRefsDefs', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_ManagerRef._t_notFoundRef,))
    Manager._op_addObjToServer = IcePy.Operation('addObjToServer', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_int, False, 0), (_M_ManagerRef._t_notFoundClass,))
    Manager._op_shutdown = IcePy.Operation('shutdown', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_ManagerRef.Manager = Manager
    del Manager

# End of module ManagerRef
